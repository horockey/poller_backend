// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.7
// Revision: bf63e108589bbd2327b13ec2c5da532aad234029
// Build Date: 2023-07-25T23:27:55Z
// Built By: goreleaser

package event

import (
	"errors"
	"fmt"
)

const (
	// ActionCreate is a Action of type Create.
	ActionCreate Action = iota
	// ActionRead is a Action of type Read.
	ActionRead
	// ActionDelete is a Action of type Delete.
	ActionDelete
)

var ErrInvalidAction = errors.New("not a valid Action")

const _ActionName = "createreaddelete"

var _ActionMap = map[Action]string{
	ActionCreate: _ActionName[0:6],
	ActionRead:   _ActionName[6:10],
	ActionDelete: _ActionName[10:16],
}

// String implements the Stringer interface.
func (x Action) String() string {
	if str, ok := _ActionMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Action(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Action) IsValid() bool {
	_, ok := _ActionMap[x]
	return ok
}

var _ActionValue = map[string]Action{
	_ActionName[0:6]:   ActionCreate,
	_ActionName[6:10]:  ActionRead,
	_ActionName[10:16]: ActionDelete,
}

// ParseAction attempts to convert a string to a Action.
func ParseAction(name string) (Action, error) {
	if x, ok := _ActionValue[name]; ok {
		return x, nil
	}
	return Action(0), fmt.Errorf("%s is %w", name, ErrInvalidAction)
}
